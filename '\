local M = {}

M.targets = {}
M.tests = {}

function M.say_hi()
    print("Hi from my plugin")
end

--- calls the swift package describe cli which gives all the targets
--- tests and files.
--- @return table
function M.package_describe()
    local stdout = vim.system({"swift", "package", "describe", "--type", "json"})
    local json = vim.json.decode(stdout)
    return json
end

function M.test_list()
    local stdout = vim.fn.system("swift test list")
    local lines = {}
    for m in stdout:gmatch("[^\r\n]+") do
        table.insert(lines, m)
    end
    local build_complete = false
    local tests = {}
    for _, line in ipairs(lines) do
        if string.find(line, "Build complete!") then
            build_complete = true
        end
        if build_complete then
            if not string.find(line, "Build complete!") then
                -- print("test >", line)
                table.insert(tests, line)
            end
        end
    end
    return tests
end

function M.create_popup()
    local buf = vim.api.nvim_create_buf(false, true) -- create new [unlisted, scratch] buffer
    -- local lines = { "Hello from popup!", "Second line" }
    vim.api.nvim_buf_set_lines(buf, 0, -1, false, M.tests)

    local width = 100
    local height = 5
    local opts = {
        relative = "editor",
        width = width,
        height = height,
        col = (vim.o.columns - width) / 2,
        row = (vim.o.lines - height) / 2,
        style = "minimal",
        border = "rounded",
    }
    local win = vim.api.nvim_open_win(buf, true, opts)
    -- highlight cursorline
    vim.wo[win].cursorline = true


    print("win_id: ", win)

    vim.api.nvim_buf_set_keymap(buf, "n", "<CR>", "", {
        callback = function()
            local row, _ = unpack(vim.api.nvim_win_get_cursor(0))
            local line = vim.api.nvim_buf_get_lines(buf, row - 1, row, false)[1]
            print("select line", line)
            -- vim.api.nvim_win_close(win, true)
            -- local output = vim.fn.system("swift test --filter" .. " " .. line)
            vim.system({"swift", "test", "--filter", line}, {text = true} , function (obj)
                vim.schedule(function ()
                    local _buf = vim.api.nvim_create_buf(true, false)
                    local _lines = vim.split(obj.stdout, "\n")
                    vim.api.nvim_buf_set_lines(_buf, 0, -1, false, _lines)
                    vim.api.nvim_buf_set_name(_buf, line)
                    vim.cmd("tabnew")
                    vim.api.nvim_win_set_buf(0, _buf) -- set to new tab
                end)
            end)
        end,
        noremap = true,
        silent = true,
    })

    vim.api.nvim_buf_set_keymap(buf, "n", "<C-c>", "", {
        callback = function()
            vim.api.nvim_win_close(win, true)
        end,
        noremap = true,
        silent = true
    })
end

vim.api.nvim_create_user_command("SwiftPackageDescribe", function()
    local targets = M.package_describe()
    for _, target in ipairs(targets) do
        print("target > ", target.name, " - ", target.type)
    end

    local tests = M.test_list()
    for _, test in ipairs(tests) do
        print("test > ", test)
    end

    -- update global cache
    M.targets = targets
    M.tests = tests
end, {})

vim.api.nvim_create_user_command("SwiftTest", function(opts)
    local _ = M.package_describe()
    local _ = M.test_list()

    local test_name = opts.args
    print("test_name: ", test_name)
    local test_output = vim.system({"swift test --filter ", test_name})
    print("test_output: ", test_output)
end, {
    nargs = 1,
    complete = "file", -- enable filename auto completions when hit tab
    desc = "Testing a file"
})

vim.api.nvim_create_user_command("SwiftToggle", function()
    M.create_popup()
end, {})

vim.api.nvim_create_user_command("SwiftPackageReset", function()
    M.targets = M.package_describe()
    M.tests = M.test_list()
end, {})

function M.setup()
    -- M.package_describe()
end

return M
